
<%- tplTsOnly('/// <reference types="mocha"/>') %>
<%- tplTsOnly(`import feathers, { Params, Service, Application } from '@feathersjs/feathers'${sc}`) %>
<%- tplTsOnly('')-%>
<%- tplImports('assert', null) %>
<%- tplImports('feathers', '@feathersjs/feathers') %>
<%- tplImports('{ join }', 'path') %>
<%- tplImports('{ readJsonFileSync }', '@feathers-plus/test-utils') %>
<%- tplImports(hookName, pathTestToHook) %>

// Get generated fake data
// eslint-disable-next-line no-unused-vars
const fakeData = readJsonFileSync(join(__dirname, '<%- pathTestToApp -%>seeds/fake-data.json')) || {}<%- sc %>

describe('Test <%- serviceFileName -%><%- hookFileName -%><%- htt%>.test.<%- js -%>', () => {
  let app<%- tplTsOnly(': Application') -%>, params<%- tplTsOnly(': Params') -%><%- sc %>
  // eslint-disable-next-line no-unused-vars
  let service<%- tplTsOnly(': Service<any>') -%><%- sc %>

  beforeEach(() => {
    app = feathers()<%- sc %>

    app.use('/test-service', {
      async create(data<%- tplTsOnly(': any') -%>) {
        return data<%- sc %>
      }
    })<%- sc %>

    app.service('/test-service').hooks({
      before: {
        create: <%- hookName -%>()
      }
    })<%- sc %>

    service = app.service('/test-service')<%- sc %>
    params = {
<%# -%>
<%# --- if-1 starts below. -%>
<% if (userEntity) { -%>
      user: (fakeData['<%- userEntity -%>'] || [])[0] || {
        email: 'test@example.com'
      }
<% } -%>
<%# --- if-1 ends above. -%>

    }<%- sc %>
  })<%- sc %>


  it('Hook exists', () => {
    assert(typeof <%- hookName -%> === 'function', 'Hook is not a function.')<%- sc %>
  })<%- sc %>

  it('???', async () => {
    params.provider = undefined<%- sc %>
    assert(true);

    /*
    const result = await service.create({

    }, params)<%- sc %>

    assert.deepEqual(user, {

    }, result)<%- sc %>
    */
  })<%- sc %>
})<%- sc %>
