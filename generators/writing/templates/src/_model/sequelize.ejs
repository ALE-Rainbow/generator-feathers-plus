
// <%= serviceName %>-model.js - A Sequelize model. (Can be re-generated.)
//
// See http://docs.sequelizejs.com/en/latest/docs/models-definition/
// for more of what you can do here.

<%- insertFragment('sequelize_schema', [
  `const sequelizeSchema = require('../services/${kebabName}/${kebabName}.sequelize')${sc}`,
]) %>
<%- insertFragment('sequelize_imports') %>
<%- insertFragment('sequelize_init') %>

let moduleExports = function (app) {
  let sequelizeClient = app.get('sequelizeClient')<%- sc %>
  <%- insertFragment('sequelize_func_init') %>

  const <%= camelName %> = sequelizeClient.define('<%= snakeName %>',
    <%- insertFragment('sequelize_model', ['    sequelizeSchema,']) %>
    <%- insertFragment('sequelize_options', [
      '    { ',
      '      hooks: {',
      '        beforeCount(options) {',
      `          options.raw = true${sc}`,
      '        },',
      '      },',
      '    },'
    ]) %>
    <%- insertFragment('sequelize_define') %>
  )<%- sc %>

  // eslint-disable-next-line no-unused-vars
  <%= camelName %>.associate = function (models) {
    // Define associations here for foreign keys
    //   [<%- sequelizeFks %>]
    // See http://docs.sequelizejs.com/en/latest/docs/associations/
    <%- insertFragment('sequelize_associations') %>
  }<%- sc %>

  <%- insertFragment('sequelize_func_return') %>
  return <%= camelName %><%- sc %>
}<%- sc %>
<%- insertFragment('sequelize_more') %>

<%- insertFragment('sequelize_exports') %>
module.exports = moduleExports<%- sc %>

<%- insertFragment('sequelize_funcs') %>
<%- insertFragment('sequelize_end') %>
