
// Configure authentication. (Can be re-generated.)
const authentication = require('@feathersjs/authentication')<%- sc %>
const jwt = require('@feathersjs/authentication-jwt')<%- sc %>
<% if(specs.authentication.strategies.indexOf('local') !== -1) { %>const local = require('@feathersjs/authentication-local')<%- sc %><% } %>
<% if(oauthProviders.length){ %>const oauth2 = require('@feathersjs/authentication-oauth2')<%- sc %><% } %>
<% oauthProviders.forEach(provider => { %>const <%= provider.strategyName %> = require('<%= provider.module %>')<%- sc %>
<% }); %>
module.exports = function (app) {
  const config = app.get('authentication')<%- sc %>

  // Set up authentication with the secret
  app.configure(authentication(config))<%- sc %>
  app.configure(jwt())<%- sc %><% if(specs.authentication.strategies.indexOf('local') !== -1) { %>
  app.configure(local())<%- sc %><% } %>
<% oauthProviders.forEach(provider => { %>
  app.configure(oauth2(Object.assign({
    name: '<%= provider.name %>',
    Strategy: <%= provider.strategyName %>
  }, config.<%= provider.name %>)))<%- sc %>
<% }); %>
  // The `authentication` service is used to create a JWT.
  // The before `create` hook registers strategies that can be used
  // to create a new valid JWT (e.g. local or oauth2)
  app.service('authentication').hooks({
    before: {
      create: [
        authentication.hooks.authenticate(config.strategies)
      ],
      remove: [
        authentication.hooks.authenticate('jwt')
      ]
    }
  })<%- sc %>
}<%- sc %>
