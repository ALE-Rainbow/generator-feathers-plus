
// Initializes the `<%= serviceName %>` service on path `/<%= path %>`
<%- tplTsOnly([`import { App } from '../../app.interface'${sc}`, '', '']) -%>
<%- tplImports('createService', 'feathers-mongodb', 'req') %>
<%- tplImports('hooks', `./${kebabName}.hooks`) %>
<%- insertFragment('imports', [
  `// ${tplImports('$jsonSchema', `./${kebabName}.mongo`, 'req', 'let')}`
]) %>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<%- tplModuleExports(null, 'function (app) {', 'function (app: App) {') %>
  let paginate = app.get('paginate')<%- sc %>
  let mongoClient = app.get('mongoClient')<%- sc %>
  let options = { paginate }<%- sc %>
  <%- insertFragment('func_init') %>

  // Initialize our service with any options it requires
  app.use('/<%= path %>', createService(options))<%- sc %>

  // Get our initialized service so that we can register hooks and filters
  const service = app.service('<%= path %>')<%- sc %>

  mongoClient.then(db => {
    return db.createCollection('<%= kebabName %>', {
      <%- insertFragment('create_collection', [
        '      // validator: { $jsonSchema: $jsonSchema },',
        '      // validationLevel: \'strict\', // The MongoDB default',
        '      // validationAction: \'error\', // The MongoDB default',
      ]) %>
    })<%- sc %>
  })
    .then(serviceModel => {
      service.Model = serviceModel<%- sc %>
    })<%- sc %>

  service.hooks(hooks)<%- sc %>
  <%- insertFragment('func_return') %>
}<%- sc %>
<%- insertFragment('more') %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
