
// Initializes the `<%= serviceName %>` service on path `/<%= path %>`. (Can be re-generated.)
const createService = require('<%= serviceModule %>')<%- sc %>
<%# -%>
<%# --- if-1 starts below. -%>
<% if(modelName) { -%>
const createModel = require('../../models/<%= modelName %>')<%- sc %>
<% } -%>
<%# --- if-1 ends above. -%>
const hooks = require('./<%= kebabName %>.hooks')<%- sc %>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

let moduleExports = function (app) {
<% if (modelName) { %>  let Model = createModel(app)<%- sc %><% } %>
  let paginate = app.get('paginate')<%- sc %>
  <%- insertFragment('func_init') %>

  let options = {
    name: '<%= kebabName %>',<% if (modelName) { %>
    Model,<% } %>
    paginate,
    <%- insertFragment('options_more') %>
  }<%- sc %>
  <%- insertFragment('options_change') %>

  // Initialize our service with any options it requires
  app.use('/<%= path %>', createService(options))<%- sc %>

  // Get our initialized service so that we can register hooks and filters
  const service = app.service('<%= path %>')<%- sc %>

  service.hooks(hooks)<%- sc %>
  <%- insertFragment('func_return') %>
}<%- sc %>

<%- insertFragment('exports') %>
module.exports = moduleExports<%- sc %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
