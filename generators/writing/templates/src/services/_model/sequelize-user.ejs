
// <%= serviceName %>-model.js - A Sequelize model
//
// See http://docs.sequelizejs.com/en/latest/docs/models-definition/
// for more of what you can do here.
const Sequelize = require('sequelize')<%- sc %>
const DataTypes = Sequelize.DataTypes<%- sc %>
<%- insertFragment('sequelize_imports') %>
<%- insertFragment('sequelize_init') %>

let moduleExports = function (app) {
  const sequelizeClient = app.get('sequelizeClient')<%- sc %>
  <%- insertFragment('sequelize_func_init') %>

  const <%= camelName %> = sequelizeClient.define('<%= snakeName %>', {
  <% if(authentication.strategies.indexOf('local') !== -1) { %>
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false
    },
  <% } %>
  <% authentication.oauthProviders.forEach(provider => { %>
    <%= provider.name %>Id: { type: Sequelize.STRING },
  <% }); %>
  }, {
    hooks: {
      beforeCount(options) {
        options.raw = true<%- sc %>
      }
    }
  })<%- sc %>

  // eslint-disable-next-line no-unused-vars
  <%= camelName %>.associate = function (models) {
    // Define associations here
    // See http://docs.sequelizejs.com/en/latest/docs/associations/
  }<%- sc %>

<%- insertFragment('sequelize_func_return') %>
  return <%= camelName %><%- sc %>
}<%- sc %>
<%- insertFragment('sequelize_more') %>

<%- insertFragment('sequelize_exports') %>
module.exports = moduleExports<%- sc %>

<%- insertFragment('sequelize_funcs') %>
<%- insertFragment('sequelize_end') %>
