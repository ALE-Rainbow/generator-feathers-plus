
// Execute raw SQL statement for GraphQL using a custom interface. (Can be re-generated.)
<%- tplTsOnly([`import { App } from '../../app.interface'${sc}`, '']) -%>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<%- tplModuleExports(null, 'function sqlExecuteCustom(app) {', 'function sqlExecuteCustom(app: App) {') %>
  // <%- lintDisableNextLineUnused %>
  let generatorSpecs = app.get('generatorSpecs')<%- sc %>
  <%- insertFragment('dialect', [
    `  // ${lintDisableNextLineUnused}`,
    `  let dialect${tplTsOnly(": 'sqlite3' | 'mariadb' | 'mysql' | 'pg' | 'oracle'")} = null${sc}`
  ]) %>
  <%- insertFragment('func_init') %>

  if (!dialect) {
    throw new Error(`Unsupported dialect: '${dialect}'`)<%- sc %>
  }

  // An async function that takes an SQL statement queries a database and resolves to an array of objects
  // <%- lintDisableNextLineUnused %>
  async function executeSql<%- tplJsOrTs('(sql)', '(sql: string): Promise<any[]>') %> {
    throw new Error(`No function for GraphQL SQL execution provided. You need to provide one in ${ __filename }`)<%- sc %>
    // return []<%- sc %>
  }

  let returns = {
    dialect,
    executeSql,
    openDb: undefined
    <%- insertFragment('moduleExports') %>
  }<%- sc %>

  <%- insertFragment('func_return') %>
  return returns<%- sc %>
}<%- sc %>
<%- insertFragment('more') %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
