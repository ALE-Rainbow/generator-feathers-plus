
/* eslint-disable no-unused-vars, indent */
// Define GraphQL resolvers using only Feathers services. (Can be re-generated.)
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

let moduleExports = function serviceResolvers(app, options) {
  const {convertArgsToFeathers, extractAllItems, extractFirstItem} = options<%- sc %>
  <%- insertFragment('extra_auth_props', [
    `  const convertArgs = convertArgsToFeathers([])${sc}`,
  ]) %>

<% let __temp = Object.keys(mapping.feathers).map(serviceName =>
  `  let ${serviceName} = app.service('${mapping.feathers[serviceName].path}')${sc}`
); -%>
  <%- insertFragment('services', __temp) %>

  let returns = {
<%# -%>
<%# --- forEach-1 starts below. Loop thru the schemas of GraphQL enabled services. -%>
<% Object.keys(mapping.graphqlService).forEach(graphqlName => {
  __serviceName = mapping.graphqlService[graphqlName].service;
  __add = feathersSpecs[__serviceName]._extensions.graphql.add;
-%>

    <%- graphqlName %>: {
<%# -%>
<%# --- forEach-2 starts below. Loop thru the fields to be added. -%>
<% Object.keys(__add).forEach(fieldName => {
  __addField = __add[fieldName];
-%>

      // <%- fieldName %><%- __addField.args %>: <%- __addField.type %>
      <%- fieldName %>:
<%# -%>
<%# --- if/else-1 starts below. -%>
<% if (__addField.serviceName) {
    __temp = [
        '        (parent, args, content, ast) => {',
        '          const feathersParams = convertArgs(args, content, ast, {',
        `            query: { ${__addField.relation.otherTable}: `
            + `${__addField.ourTableIsArray ? '{ $in: ' : ''}parent.${__addField.relation.ourTable}${__addField.ourTableIsArray ? ' }' : ''}`
            + `${__addField.isArray ? `, $sort: undefined` : ''} }`
            + ', paginate: false',
        `          })${sc}`,
        `          return ${__addField.serviceName}.find(feathersParams).then(${__addField.isArray ? "extractAllItems" : "extractFirstItem"})${sc}`,
        '        },'
  ];
-%>
        <%- insertFragment(`resolver-${graphqlName}-${fieldName}`, __temp) %>
<% } else { -%>
        <%- insertFragment(`resolver-${graphqlName}-${fieldName}-non`,
          `        (parent, args, content, ast) => { throw Error('GraphQL fieldName ${graphqlName}.${fieldName} is not calculated.')${sc} },`
        ) %>
<% } -%>
<%# --- if/else-1 ends above. -%>
<% }); -%>
<%# --- forEach-2 ends above. -%>
    },
<% }); -%>
<%# --- forEach-1 ends above. -%>

    <%- insertFragment('resolver_field_more') %>

    Query: {
<%# -%>
<%# --- forEach-3 starts below. Loop thru the schemas of GraphQL enabled services. -%>
<% Object.keys(mapping.graphqlService).forEach(graphqlName => {
  __serviceName = mapping.graphqlService[graphqlName].service;
  __graphql = feathersSpecs[__serviceName]._extensions.graphql;
  __temp = [
    `      // get${graphqlName}(query: JSON, params: JSON, key: JSON): ${graphqlName}`,
    `      get${graphqlName} (parent, args, content, ast) {`,
    `        const feathersParams = convertArgs(args, content, ast)${sc}`,
    `        return ${__serviceName}.get(args.key, feathersParams).then(extractFirstItem)${sc}`,
    '      },',
    '',
    `      // find${graphqlName}(query: JSON, params: JSON): [${graphqlName}!]`,
    `      find${graphqlName}(parent, args, content, ast) {`,
    `        const feathersParams = convertArgs(args, content, ast${__graphql.serviceSortParams})${sc}`,
    `        return ${__serviceName}.find(feathersParams).then(paginate(content)).then(extractAllItems)${sc}`,
    '      },',
  ];
-%>

      <%- insertFragment(`query-${graphqlName}`, __temp) %>
<% }); -%>
<%# --- forEach-3 ends above. -%>
      <%- insertFragment('resolver_query_more') %>
    },
  }<%- sc %>

  <%- insertFragment('func_return') %>
  return returns<%- sc %>
}<%- sc %>

<%- insertFragment('more') %>

<%- insertFragment('exports') %>
module.exports = moduleExports<%- sc %>

function paginate(content) {
  return result => {
    content.pagination = !result.data ? undefined : {
      total: result.total,
      limit: result.limit,
      skip: result.skip,
    }<%- sc %>

    return result<%- sc %>
  }<%- sc %>
}
<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
