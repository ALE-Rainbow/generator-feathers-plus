
// Execute raw SQL statement for GraphQL. (Can be re-generated.)
// <%- lintDisableNextLineUnused %>
<%- tplImports('{ cwd }', 'process') %>
// <%- lintDisableNextLineUnused %>
<%- tplImports('{ join }', 'path') %>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<%- insertFragment('main', [
  `let dialect, openDb, executeSql${sc}`,
  `// ${tplJsOrTs(`const sqlite = require('sqlite')`, `import * as sqlite from 'sqlite'`)}${sc}`,
  `// dialect = 'sqlite3'${sc}`,
  '',
  '// openDb = () => {',
  `//   sqlite.open(join(cwd(), 'data', 'sqlite3.db'))${sc}`,
  `//   return sqlite${sc}`,
  `// }${sc}`,
  '',
  `// executeSql = ${tplJsOrTs('sql', '(sql: any)')} => ${tplJsOrTs('sqlite', '(sqlite as any)')}.all(sql)`,
  `//   .catch(${tplJsOrTs('err', '(err: Error)')} => {`,
  `//     // ${lintDisableNextLine} no-console`,
  `//     console.log('executeSql error=', err.message)${sc}`,
  `//     throw err${sc}`,
  `//   })${sc}`,
]) %>

let moduleExports = {
  dialect,
  executeSql,
  openDb,
  <%- insertFragment('moduleExports') %>
}<%- sc %>

<%- insertFragment('more') %>

<%- insertFragment('exports') %>
<%- `${tplExport('moduleExports')}${sc}` %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
