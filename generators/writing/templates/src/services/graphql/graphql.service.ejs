
// Initializes the `<%= serviceName %>` service on path `/<%= path %>`. (Can be re-generated.)
const createService = require('@feathers-plus/graphql');
const { mergeTypes } = require('merge-graphql-schemas');
const deepMerge = require('deepmerge');
const generatedSchema = require('./graphql.schemas');
<%# -%>
<%# --- if-1 starts below. -%>
<% if (strategy === 'services') { -%>
const generatedResolvers = require('./service.resolvers');
<% } -%>
<%# --- if-1 ends above. -%>
<%# -%>
<%# --- if-2 starts below. -%>
<% if (strategy === 'batchloaders') { -%>
const generatedResolvers = require('./batchloader.resolvers');
<% } -%>
<%# --- if-2 ends above. -%>
<%# -%>
<%# --- if-3 starts below. -%>
<% if (strategy === 'sql') { -%>
const generatedResolvers = require('./sql.resolvers');
const generatedMetadata = require('./sql.metadata');
const { dialect, executeSql, openDb } = require('./sql.execute');
<% } -%>
<%# --- if-3 ends above. -%>
const hooks = require('./graphql.hooks');
<%- insertFragment('imports') %>

const strategy = '<%- strategy %>';
console.log(`\n===== configuring graphql service for ${strategy}.\n`);

let schemas = mergeTypes([
  generatedSchema,
  <%- insertFragment('schemas') %>
]);

<%# -%>
<%# --- if-4 starts below. -%>
<% if (strategy === 'services') { -%>
let resolvers = (app, options) => deepMerge.all([{},
  generatedResolvers(app, options),
  <%- insertFragment('service_resolvers') %>
]);
<% } -%>
<%# --- if-4 ends above. -%>
<%# -%>
<%# --- if-5 starts below. -%>
<% if (strategy === 'batchloaders') { -%>
let resolvers = (app, options) => deepMerge.all([{},
  generatedResolvers(app, options),
  <%- insertFragment('batchloader_resolvers') %>
]);
<% } -%>
<%# --- if-5 ends above. -%>
<%# -%>
<%# --- if-6 starts below. -%>
<% if (strategy === 'sql') { -%>
let resolvers = (app, options) => deepMerge.all([{},
  generatedResolvers(app, options),
  <%- insertFragment('sql_resolvers') %>
]);

let sqlJoins = (app, options) => deepMerge.all([{},
  generatedMetadata(app, options),
  <%- insertFragment('sql_metadata') %>
]);

if (!dialect) {
  throw new Error('services/graphql/sql.execute.js has not been configured.');
}
<% } -%>
<%# --- if-6 ends above. -%>
<%- insertFragment('init') %>

let moduleExports = function(){
  const app = this;
  <%- insertFragment('func_init') %>

  let options = {
    schemas,
    resolvers,
<%# -%>
<%# --- if-7 starts below. -%>
<% if (strategy === 'sql') { -%>
    sqlJoins,
    dialect,
    executeSql,
    openDb,
    logSql: false,
<% } -%>
<%# --- if-7 ends above. -%>
  };
  <%- insertFragment('func_options') %>

  // Initialize our service with any options it requires.
  const createdService = createService(options);
  app.use('/graphql', createdService);

  // Get our initialized service so that we can register hooks and filters
  const service = app.service('/graphql');

  service.hooks(hooks);
  //!code: func_return //!end
};

<%- insertFragment('exports') %>
module.exports = moduleExports;

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>

/*
Stash code not used now but which may be used if the module is regenerated.
<%# -%>
<%# --- if-a starts below. -%>
<% if (strategy !== 'services') { -%>
<%- insertFragment('service_resolvers') %>
<% } -%>
<%# --- if-a ends above. -%>
<%# -%>
<%# --- if-b starts below. -%>
<% if (strategy !== 'batchloaders') { -%>
<%- insertFragment('batchloader_resolvers') %>
<% } -%>
<%# --- if-b ends above. -%>
<%# -%>
<%# --- if-c starts below. -%>
<% if (strategy !== 'sql') { -%>
<%- insertFragment('sql_resolvers') %>
<%- insertFragment('sql_metadata') %>
<% } -%>
<%# --- if-c ends above. -%>
*/
