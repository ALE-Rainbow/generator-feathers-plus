
// Hooks for service `<%= name %>`, including auth. (Can be re-generated.)
const commonHooks = require('feathers-hooks-common');
const { authenticate } = require('@feathersjs/authentication').hooks;
<%- insertFragment('imports') %>

<% if (authentication.strategies.indexOf('local') !== -1) { %>const {
  hashPassword, protect
} = require('@feathersjs/authentication-local').hooks;<% } %>

<%- insertFragment('used', [
  '// eslint-disable-line no-unused-vars',
  'const { iff } = commonHooks;'
]) %>
<%- insertFragment('init') %>

let moduleExports = {
  before: {
    all: [],
    find: [ authenticate('jwt') ],
    get: [],
    create: [ <% if (authentication.strategies.indexOf('local') !== -1) { %>hashPassword()<% } %> ],
    update: [ <% if (authentication.strategies.indexOf('local') !== -1) { %>hashPassword()<% } %> ],
    patch: [ <% if (authentication.strategies.indexOf('local') !== -1) { %>hashPassword()<% } %> ],
    remove: []
  },

  after: {
    all: [ <% if (authentication.strategies.indexOf('local') !== -1) { %>
      <%- insertFragment('after_all') %>
      // Make sure the password field is never sent to the client
      // Always must be the last hook
      protect('password')<% } %>,
    ],
    <%- insertFragment('after', [
      '    find: [],',
      '    get: [],',
      '    create: [],',
      '    update: [],',
      '    patch: [],',
      '    remove: [],',
    ]) %>
  },

  error: {
    <%- insertFragment('error', [
      '    all: [],',
      '    find: [],',
      '    get: [],',
      '    create: [],',
      '    update: [],',
      '    patch: [],',
      '    remove: [],',
    ]) %>
  },
<%- insertFragment('moduleExports') %>
};

<%- insertFragment('exports') %>
module.exports = moduleExports;

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
