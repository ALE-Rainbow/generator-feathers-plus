
/* eslint quotes: 0 */
// Validation definitions for validateSchema hook for service `<%= serviceName %>`. (Can be re-generated.)
const { validateSchema } = require('feathers-hooks-common')<%- sc %>
const merge = require('lodash.merge')<%- sc %>
const ajv = require('ajv')<%- sc %>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<%- insertFragment('set_id_type', [
  '// eslint-disable-next-line no-unused-vars',
  `const ID = 'string'${sc}`,
]) %>

const base = merge({},
<% __jsonSchema = merge({}, feathersSpecs[serviceName]);
   delete __jsonSchema._extensions;
   __str = stringifyPlus(__jsonSchema).replace(/"ID"/g, 'ID')
     .split('\n').map(str => `  ${str}`).join('\n');
-%>
  <%- insertFragment('base', Object.keys(__jsonSchema).length === 0 ? undefined : `${__str},`) %>
  <%- insertFragment('base_more') %>
)<%- sc %>

const create = merge({},
  base,
  <%- insertFragment('create_more') %>
)<%- sc %>

const update = merge({},
  base,
  <%- insertFragment('update_more') %>
)<%- sc %>

const patch = merge({},
  base,
  { required: undefined },
  <%- insertFragment('patch_more') %>
)<%- sc %>

const validateCreate = options => {
  <%- insertFragment('func_create', [
    `  return validateSchema(create, ajv, options)${sc}`,
  ]) %>
}<%- sc %>

const validateUpdate = options => {
  <%- insertFragment('func_update', [
    `  return validateSchema(update, ajv, options)${sc}`,
  ]) %>
}<%- sc %>

const validatePatch = options => {
  <%- insertFragment('func_patch', [
    `  return validateSchema(patch, ajv, options)${sc}`,
  ]) %>
}<%- sc %>

const quickValidate = (method, data, options) => {
  try {
    if (method === 'create') validateCreate(options)({ type: 'before', method: 'create', data })<%- sc %>
    if (method === 'update') validateCreate(options)({ type: 'before', method: 'update', data })<%- sc %>
    if (method === 'patch') validateCreate(options)({ type: 'before', method: 'patch', data })<%- sc %>
  } catch (err) {
    return err<%- sc %>
  }
}<%- sc %>

let moduleExports = {
  create,
  update,
  patch,
  validateCreate,
  validateUpdate,
  validatePatch,
  quickValidate,
  <%- insertFragment('moduleExports') %>
}<%- sc %>

<%- insertFragment('exports') %>
module.exports = moduleExports<%- sc %>

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
