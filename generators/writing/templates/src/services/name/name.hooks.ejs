
// Hooks for service `<%= serviceName %>`. (Can be re-generated.)
const commonHooks = require('feathers-hooks-common');
<%# -%>
<%# --- if-1 starts below. -%>
<% if (requiresAuth || isAuthEntityWithAuthentication) { -%>
const { authenticate } = require('@feathersjs/authentication').hooks;
<% } -%>
<%# --- if-1 ends above. -%>

<%# -%>
<%# --- if-2 starts below. -%>
<% if (isAuthEntityWithAuthentication && authentication.strategies.indexOf('local') !== -1) { -%>
const {
  // eslint-disable-next-line no-unused-vars
  hashPassword, protect
} = require('@feathersjs/authentication-local').hooks;
<% } -%>
<%# --- if-2 ends above. -%>
<%- insertFragment('imports') %>

<%- insertFragment('used', [
  '// eslint-disable-next-line no-unused-vars',
  'const { iff } = commonHooks;'
]) %>
<%- insertFragment('init') %>

let moduleExports = {
  before: {
<%# -%>
<%# --- if/else-3 starts below. -%>
<% if (!isAuthEntityWithAuthentication) { -%>
<%# -%>
<%# --- if-3a starts below. -%>
<% if (requiresAuth) { -%>
    // Your hooks should include:
    //   all: authenticate('jwt')
<% } -%>
<%# --- if/-3a ends above. -%>
    <%- insertFragment('before', [
      `    all: [${requiresAuth ? " authenticate('jwt') " : ''}],`,
      '    find: [],',
      '    get: [],',
      '    create: [],',
      '    update: [],',
      '    patch: [],',
      '    remove: []',
    ]) %>
<% } else {
  __temp = authentication.strategies.indexOf('local') !== -1 ? ' hashPassword()' : '';
-%>
    // Your hooks should include:
    //   find:   authenticate('jwt')
    //   get:    authenticate('jwt')
<%# -%>
<%# --- if-3b starts below. -%>
<% if (__temp) { -%>
    //   create:<%- __temp %>
<% } -%>
<%# --- if/-3b ends above. -%>
    //   update: authenticate('jwt')<%- __temp %>
    //   patch:  authenticate('jwt')<%- __temp %>
    //   remove: authenticate('jwt')
    <%- insertFragment('before', [
      '    all: [],',
      '    find: [ authenticate(\'jwt\') ],',
      '    get: [ authenticate(\'jwt\') ],',
      `    create: [${__temp}${__temp ? ' ' : ''}],`,
      `    update: [${__temp}${__temp ? ', ' : ''}authenticate('jwt') ],`,
      `    patch: [${__temp}${__temp ? ', ' : ''}authenticate('jwt') ],`,
      '    remove: [ authenticate(\'jwt\') ]',
    ]) %>
<% } -%>
<%# --- if/else-3 ends above. -%>
  },

  after: {
<%# -%>
<%# --- if/else-4 starts below. -%>
<% if (!isAuthEntityWithAuthentication) { -%>
    <%- insertFragment('after', [
      '    all: [],',
      '    find: [],',
      '    get: [],',
      '    create: [],',
      '    update: [],',
      '    patch: [],',
      '    remove: []',
    ]) %>
<% } else { -%>
<%# -%>
<%# --- if-4a starts below. -%>
<% if (authentication.strategies.indexOf('local') !== -1) { -%>
    // Your hooks should include:
    //   all: protect('password')
<% } -%>
<%# --- if-4a ends above. -%>
    <%- insertFragment('after', authentication.strategies.indexOf('local') !== -1
      ? [
        '    all: [',
        '      // Make sure the password field is never sent to the client',
        '      // Always must be the last hook',
        '      protect(\'password\')',
        '    ],',
        '    find: [],',
        '    get: [],',
        '    create: [],',
        '    update: [],',
        '    patch: [],',
        '    remove: []',
      ]
      : [
        `    all: [],`,
        '    find: [],',
        '    get: [],',
        '    create: [],',
        '    update: [],',
        '    patch: [],',
        '    remove: []',
      ]
    ) %>
<% } -%>
<%# --- if/else-4 ends above. -%>
  },

  error: {
    <%- insertFragment('error', [
      '    all: [],',
      '    find: [],',
      '    get: [],',
      '    create: [],',
      '    update: [],',
      '    patch: [],',
      '    remove: []',
    ]) %>
  },
  <%- insertFragment('moduleExports') %>
};

<%- insertFragment('exports') %>
module.exports = moduleExports;

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
