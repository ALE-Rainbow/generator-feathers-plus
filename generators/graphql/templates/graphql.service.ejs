
// Initializes the `<%= name %>` service on path `/<%= path %>`
const createService = require('@feathers-x/graphql');
const { mergeTypes } = require('merge-graphql-schemas');
const hooks = require('./graphql.hooks');
<%- insertFragment('imports') %>

const strategy = '<%- strategy %>';
console.log(`\n===== configuring graphql service for ${strategy}.\n`);

const schemas = mergeTypes([
  require('./graphql.schemas'),
  <%- insertFragment('schemas') %>
]);

<%# -%>
<%# --- if-0 starts below. -%>
<% if (strategy === 'services') { -%>
// Setup for using Feathers service calls.
const serviceResolvers = (app, options) => Object.assign({},
  require('./service.resolvers')(app, options),
  <%- insertFragment('service_resolvers') %>
);
<% } -%>
<%# --- if-0 ends above. -%>
<%# -%>
<%# --- if-1 starts below. -%>
<% if (strategy === 'batchloaders') { -%>
// Setup for using BatchLoaders.
const serviceResolvers = (app, options) => Object.assign({},
  require('./batchloader.resolvers')(app, options),
  <%- insertFragment('batchloader_resolvers') %>
);
<% } -%>
<%# --- if/else-1 ends above. -%>
<%# -%>
<%# --- if-2 starts below. -%>
<% if (strategy === 'sql') { -%>
// Setup for using SQL statements.
const { dialect, executeSql, openDb } = require('./sql.execute');
if (!dialect) {
  throw new Error('services/graphql/sql.execute.js has not been configured.');
}

const sqlResolvers = (app, options) => Object.assign({},
  require('./sql.resolvers')(app, options),
  <%- insertFragment('sql_resolvers') %>
);

const sqlJoins = (app, options) => Object.assign({},
  require('./sql.metadata')(app, options),
  <%- insertFragment('sql_metadata') %>
);
<% } -%>
<%# --- if-2 ends above. -%>
<%- insertFragment('init') %>

let moduleExports = function(){
  const app = this;
  <%- insertFragment('func_init') %>

  const options = {
<%# -%>
<%# --- if-4 starts below. -%>
<% if (strategy === 'services' || strategy === 'batchloaders') { -%>
    schemas,
    resolvers: serviceResolvers,
<% } -%>
<%# --- if-4 ends above. -%>
<%# -%>
<%# --- if-5 starts below. -%>
<% if (strategy === 'sql') { -%>
    schemas,
    resolvers: sqlResolvers,
    sqlJoins,
    dialect,
    executeSql,
    openDb,
    logSql: false,
<% } -%>
<%# --- if-5 ends above. -%>
    <%- insertFragment('func_options') %>
  };

  // Initialize our service with any options it requires.
  const createdService = createService(options);
  app.use('/graphql', createdService);

  // Get our initialized service so that we can register hooks and filters
  const service = app.service('/graphql');

  service.hooks(hooks);
  //!code: func_return //!end
};

<%- insertFragment('exports') %>
module.exports = moduleExports;

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>

/*
Stash custom code perhaps not used here but which may be used if the module is regenerated.
<%- insertFragment('service_resolvers') %>
<%- insertFragment('batchloader_resolvers') %>
<%- insertFragment('sql_resolvers') %>
<%- insertFragment('sql_metadata') %>
*/