
const { getByDot, setByDot } = require('feathers-hooks-common');
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

let moduleExports = function batchloaderResolvers(app, options) {
  let { convertArgsToParams, convertArgsToFeathers, extractAllItems, extractFirstItem, // eslint-disable-line
    feathersDataLoader: { feathersDataLoader: feathersBatchLoader } } = options;

<% let __temp = Object.keys(mapping.feathers).map(name =>
  `  const ${name} = app.service('${mapping.feathers[name].path}');`
); -%>
  <%- insertFragment('services', __temp) %>

  <%- insertFragment('get-result', [
    '  // Given a fieldName in the parent record, return the result from a BatchLoader',
    '  // The result will be an object, an array of objects, or null.',
    '  function getResult(batchLoaderName, fieldName) {',
    '    const contentByDot = `batchLoaders.${batchLoaderName}`;',
    '',
    '    // `content.app = app` is the Feathers app object.',
    '    // `content.batchLoaders = {}` is where the BatchLoaders for a request are stored.',
    '    return (parent, args, content, ast) => {',
    '      let batchLoader = getByDot(content, contentByDot);',
    '',
    '      if (!batchLoader) {',
    '        batchLoader = getBatchLoader(batchLoaderName, parent, args, content, ast);',
    '        setByDot(content, contentByDot, batchLoader);',
    '      }',
    '',
    '      return batchLoader.load(parent[fieldName]);',
    '    };',
    '  }',
  ]) %>

  // A transient BatchLoader can be created only when (one of) its resolver has been called,
  // as the BatchLoader loading function may require data from the 'args' passed to the resolver.
  // Note that each resolver's 'args' are static throughout a GraphQL call.
  function getBatchLoader(dataLoaderName, parent, args, content, ast) {
    let feathersParams;

    switch (dataLoaderName) {
      /* Persistent BatchLoaders. Stored in `content.batchLoaders._persisted`. */
      <%- insertFragment('bl-persisted', [
        '      // case \'_persisted.___XXX___\':',
      ]) %>

      /* Transient BatchLoaders shared among resolvers. Stored in `content.batchLoaders._shared`. */
      <%- insertFragment('bl-shared', [
          '      // *.*: User',
          '      // case \'_shared.user.one.uuid\':',
      ]) %>

      /* Transient BatchLoaders used by only one resolver. Stored in `content.batchLoaders`. */
<%# -%>
<%# --- forEach-a starts below. Loop thru the schemas of GraphQL enabled services. -%>
<% Object.keys(fieldInfo).forEach(type => { -%>
<%# -%>
<%# --- forEach-b starts below. Loop thru the fields to be renamed. -%>
<% Object.keys(fieldInfo[type].fields).forEach(field => { -%>

      // <%- type %>.<%- field %><%- fieldInfo[type].fields[field].args %>: <%- fieldInfo[type].fields[field].type %>
<%# -%>
<%# --- if-1c starts below. -%>
<% if (fieldInfo[type].fields[field].serviceName) {
  __fieldInfo = fieldInfo[type].fields[field];
  __code = '[!]';
  if (!__fieldInfo.isArray) { __code = __fieldInfo.isNullable ? '' : '!'; }
  __temp = [
    `      case '${type}.${field}':`,
    `        return feathersBatchLoader(dataLoaderName, '${__code}', '___FOO___',`,
    '          keys => {',
    '            feathersParams = convertArgsToFeathers(args,',
    '              { query : { __FOO__: { $in: keys }, $sort: {} } },',
    '            );',
    `            return ${fieldInfo[type].fields[field].serviceName}.find(feathersParams);`,
    '          }',
    '        );',
  ];
-%>
      <%- insertFragment(`bl-${type}-${field}`, __temp) %>
<% } -%>
<%# --- if-c ends above. -%>
<% }); -%>
<%# --- forEach-b ends above. -%>
<% }); -%>
<%# --- forEach-a ends above. -%>

      /* Throw on unknown BatchLoader name. */
      default:
        <%- insertFragment('bl-default', [
          '        throw new Error(`GraphQL query requires BatchLoader named \'${dataLoaderName}\' but no definition exists for it.`);',
        ]) %>
    }
  }

  let returns = {
<%# -%>
<%# --- forEach-1 starts below. Loop thru the schemas of GraphQL enabled services. -%>
<% Object.keys(fieldInfo).forEach(type => { -%>

    <%- type %>: {
<%# -%>
<%# --- forEach-2 starts below. Loop thru the fields to be renamed. -%>
<% Object.keys(fieldInfo[type].fields).forEach(field => { -%>

      // <%- field %><%- fieldInfo[type].fields[field].args %>: <%- fieldInfo[type].fields[field].type %>
<%# -%>
<%# --- if/else-1 starts below. -%>
<% if (fieldInfo[type].fields[field].serviceName) {
  __temp = [
    `        // ${field}: getResult('${type}.${field}', '__FOO__'),`,
  ];
-%>
      <%- insertFragment(`resolver-${type}-${field}`, __temp) %>
<% } else { -%>
      <%- insertFragment(`resolver-${type}-${field}-non`, [
        '        (parent, args, content, ast) => {},',
      ]) %>
<% } -%>
<%# --- if/else-1 ends above. -%>
<% }); -%>
<%# --- forEach-2 ends above. -%>
    },
<% }); -%>
<%# --- forEach-1 ends above. -%>

    <%- insertFragment('resolver_field_more') %>

    Query: {
<%# -%>
<%# --- forEach-3 starts below. Loop thru the schemas of GraphQL enabled services. -%>
<% Object.keys(queryInfo).forEach(graphqlName => {
  __temp = [
    `      // get${graphqlName}(query: JSON, params: JSON, key: JSON): ${graphqlName}`,
    `      get${graphqlName} (parent, args, content, info) {`,
    '        const feathersParams = convertArgsToFeathers(args);',
    `        return ${queryInfo[graphqlName].schemaName}.get(args.key, feathersParams).then(extractFirstItem);`,
    '      },',
    '',
    `      // find${graphqlName}(query: JSON, params: JSON): [${graphqlName}!]`,
    `      find${graphqlName}(parent, args, content, info) {`,
    `        const feathersParams = convertArgsToFeathers(args${queryInfo[graphqlName].moreParams});`,
    `        return ${queryInfo[graphqlName].schemaName}.find(feathersParams).then(extractAllItems);`,
    '      },',
  ];
-%>

      <%- insertFragment(`query-${graphqlName}`, __temp) %>
<% }); -%>
<%# --- forEach-3 ends above. -%>
      <%- insertFragment('resolver_query_more') %>
    },
  };

  //!code: func_return //!end
  return returns;
};

<%- insertFragment('more') %>

<%- insertFragment('exports') %>
module.exports = moduleExports;

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
